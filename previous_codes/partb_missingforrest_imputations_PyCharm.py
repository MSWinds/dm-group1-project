# -*- coding: utf-8 -*-
"""PartB_MissingForrest_Imputations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17zZ9i1THDdbS6vLCq8fzRg_zsdABrREl

# Load Data
"""
import pandas as pd 
pd.set_option('display.max_rows', None) 
pd.set_option('display.max_columns', None) 

import numpy as np
import math

import warnings
warnings.filterwarnings("ignore")
file_path = '/Users/patrickwatkins/Downloads/'

df = pd.read_csv(file_path + 'df_b_pos.csv')
df_input=df.copy()
df_input.head()

"""# Missing Value (Missing Forrest)"""

import sklearn.neighbors._base
import sys
sys.modules['sklearn.neighbors.base'] = sklearn.neighbors._base

from missingpy import MissForest

# Make an instance and perform the imputation
# Use all default values for the imputer
tree_imputer = MissForest()

X = df_input.drop(['no_atbat','no_hits','no_home','no_runs','no_rbi','yr_major','cr_atbat','cr_hits','cr_home','cr_runs','cr_rbi',
                   'cr_bb','no_outs','no_assts','no_error','league_American','league_National','division_East','division_West',
                   'team_Atlanta','team_Baltimore','team_Boston','team_California','team_Chicago','team_Cincinnati','team_Cleveland',
                   'team_Detroit','team_Houston','team_KansasCity','team_LosAngeles','team_Milwaukee','team_Minneapolis','team_Montreal',
                   'team_NewYork','team_Oakland','team_Philadelphia','team_Pittsburgh','team_SanDiego','team_SanFrancisco','team_Seattle',
                   'team_StLouis','team_Texas','team_Toronto','position_1B','position_2B','position_3B','position_C','position_CF',
                   'position_DH','position_LF','position_OF','position_RF','position_SS','position_UT'], axis=1,) #drop the columns with no missing value

tree_impute_array = tree_imputer.fit_transform(X)

df_input['logsalar'] = tree_impute_array [:, 1]
#I chose 1 because Iteration 0 gave values that were way too high compared to the logsalar values in the original dataset

# Create a metadata dataframe that contains information about the input dataframe
def metadata(df):
    columns_list = list(df.columns.values)
    metadata = pd.DataFrame(columns_list, columns=['col_name'])

    # Data types
    metadata['data_type'] = [i for i in df.dtypes.astype(str)]

    # Missing values
    metadata['missing_values'] = [i for i in df.isnull().sum()]

    # Missing values percentage in two digits number
    metadata['missing_values_percentage'] = [round(i*100,2) for i in df.isnull().sum() / df.shape[0]]
    
    # Number of unique values
    metadata['unique_values'] = [i for i in df.nunique()]

    # Number of unique values percentage
    metadata['unique_values_percentage'] = [round(i*100,2) for i in df.nunique() / df.shape[0]]

    # Basic statistics for interval columns
    interval_columns = [col for col in columns_list if df[col].dtype != 'object']
    desc_interval = df[interval_columns].agg(['min', 'max', 'std']).transpose().reset_index().rename(columns={'index': 'col_name'})
    metadata = metadata.merge(desc_interval, on='col_name', how='left')

    return metadata

#Dataframe with columns that do not have missing values
Tree_impute_df = df_input[['logsalar','no_atbat','no_hits','no_home','no_runs','no_rbi','yr_major','cr_atbat','cr_hits','cr_home','cr_runs','cr_rbi',
                   'cr_bb','no_outs','no_assts','no_error','league_American','league_National','division_East','division_West',
                   'team_Atlanta','team_Baltimore','team_Boston','team_California','team_Chicago','team_Cincinnati','team_Cleveland',
                   'team_Detroit','team_Houston','team_KansasCity','team_LosAngeles','team_Milwaukee','team_Minneapolis','team_Montreal',
                   'team_NewYork','team_Oakland','team_Philadelphia','team_Pittsburgh','team_SanDiego','team_SanFrancisco','team_Seattle',
                   'team_StLouis','team_Texas','team_Toronto','position_1B','position_2B','position_3B','position_C','position_CF',
                   'position_DH','position_LF','position_OF','position_RF','position_SS','position_UT']]
print(Tree_impute_df.head(7))

print(metadata(Tree_impute_df))